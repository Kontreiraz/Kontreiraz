#Título: Imob IA 
#Data: 28/12/2023 ás 21:12h. 
#Autor: Kontreiraz. 
#Descrição: Algoritmo para análise do mercado imobiliário nacional e internacional. 


print("Imob IA")
print("Beta")

# Importar o módulo datetime
import datetime

# Obter a data e hora atual no horário de Brasília
agora = datetime.datetime.now(tz=datetime.timezone(datetime.timedelta(hours=-3)))

# Formatar a data e hora no formato desejado
data = agora.strftime("%d/%m/%Y")
hora = agora.strftime("%H:%M")


print("Data: ", data)
print("Hora: ", hora)


# Gerar uma senha de 6 dígitos aleatórios
senha = 190284

# Definir o número de tentativas
tentativas = 3

# Pedir ao usuário para digitar a senha
print("Digite a senha de 6 dígitos:")

# Enquanto houver tentativas
while tentativas > 0:
  # Ler a entrada do usuário
  entrada = int(input())

  # Se a entrada for igual à senha
  if entrada == senha:
    # Parabenizar o usuário e encerrar o programa
    print("Senha correta. Acesso concedido.")
    print("Sejam bem vindos (as) ao Imob IA.")
    ("O algoritmo desenvolvido com técnicas de Inteligência Artificial para aplicações no Mercado Imobiliário")
    print("São funções do Imob IA")
    print("1 - Análise do Cenário Macroeconômico")
    print("2 - Análise do Mercado de Imobiliário Nacional e Internacional")
    print("3 - Relação cliente - corretor e redução de inadimplência")
    print("4 - Melhores taxas para financiamento")
    print("5 - Contato com o suporte")
    print("Gostaria de definir uma função?")
    print("1 - Sim\n2 - Não")
    option = int(input("Entre com sua opção: "))
    if option == 1: 
      function = int(input("Defina a sua função: "))
      if function == 1: 
        print("Análise do Cenário Macroeconômico")
        print("Selecione uma região para analisar")
        print("1 - Brasil")
        print("2 - Estados Unidos")
        print("3 - China")
        print("4 - União Européia")
        print("5 - Outra")
        region = int(input("Defina a região que deseja analisar: "))
        if region == 1: 
          print("Brasil")
        elif region == 2: 
          print("Estados Unidos")
        elif region == 3: 
          print("China")
        elif region == 4: 
          print("União Européia")
        elif region == 5: 
          other_region = str(input("Entre com a região que deseja analisar: "))
          print(other_region)
        print("Link para acesso aos dados macroeconômicos: ")
        print("https://pt.tradingeconomics.com")
        
        print("Taxa de Juros")
        interest_rate = float(input("Entre com a taxa de juros do período: "))
        inflation_rate = float(input("Entre com a taxa de inflação do periodo: "))
        real_rate = (1+(interest_rate/100))/(1+(inflation_rate/100))
        print("Taxa Real do período: ", real_rate)
        print("Tendência do período")
        if interest_rate > inflation_rate: 
          print("Tendência de queda dos juros")
          print("Possível aquecimento do setor.")
        else: 
          print("Tendência de alta dos juros")
          print("Esfriamento do setor.")


      elif function == 2: 
        print("Análise do Mercado Imobiliário")
        print("Desempenho percentual dos Índices")
        #Dados referentes ao: 
        #Índice Imob que é o índice de referência do mercado imobiliário da B3.
        #Índice FTSE Nareit All Equity REITS Index é o índice internacional de referência do mercado imobiliário.
        
        import pandas as pd 
        markets = {
            "Imob_Index": [-4.64,-0.72,6.84,17.11,9.62,5.15,-7.65,-3.14,-6.09,14.85,8.69,-1.98],
            "FTSE_FNER": [-6.07,-2.48,0.12,-4.37,4.55,1.88,-3.53,-7.67,-3.30,11.66,8.05,0.54]
        }

        df = pd.DataFrame (markets, index = ["jan/23", "fev/23", "mar/23", "abr/23", "mai/23", "jun/23", "jul/23", "ago/23", "set/23", "out/23", "nov/23", "dez/23"])

        print(df)

        imob_dataset = [-4.64,-0.72,6.84,17.11,9.62,5.15,-7.65,-3.14,-6.09,14.85,8.69,-1.98]
        ftse_dataset = [-6.07,-2.48,0.12,-4.37,4.55,1.88,-3.53,-7.67,-3.30,11.66,8.05,0.54]

        #Número de elementos do Dataset
        elementos = len(imob_dataset) 
        elements = len(ftse_dataset)
        print("Número de elementos do Dataset Imob: ", elementos)
        print("Número de elementos do Dataset FTSE: ", elements)

        #Valor absoluto do Dataset. 
        soma_imob = sum(imob_dataset)
        soma_ftse = sum(ftse_dataset)
        print("Valor absoluto do Dataset Imob: ", soma_imob)
        print("Valor absoluto do Dataset FTSE: ", soma_ftse)

        #Valor máximo dentro do Dataset. 
        max_value_imob = max(imob_dataset)
        max_value_ftse = max(ftse_dataset)
        print("Valor máximo do Dataset Imob: ", max_value_imob)
        print("Valor máximo do Dataset FTSE: ", max_value_ftse)

        #Valor mínimo dentro do Dataset. 
        min_value_imob = min(imob_dataset)
        min_value_ftse = min(ftse_dataset)
        print("Valor mínimo do Dataset Imob: ", min_value_imob)
        print("Valor mínimo do Dataset FTSE: ", min_value_ftse)

        #Intervalo da diferença entre o valor máximo e o mínino no Dataset. 
        range_imob = max_value_imob - min_value_imob 
        range_ftse = max_value_ftse - min_value_ftse
        print("Range do Dataset Imob: ", range_imob)
        print("Range do Dataset FTSE: ", range_ftse)

        import numpy as np 
        #Valor da Média Aritmética do Dataset. 
        mean_dataset_imob = np.mean(imob_dataset)
        mean_dataset_ftse = np.mean(ftse_dataset)
        print("Valor médio do Dataset Imob: ", mean_dataset_imob)
        if mean_dataset_imob > imob_dataset [11]: 
          print("Tendência de alta dos valores do Imob")
        else: 
          print("Tendência de queda dos valores do Imob")
        
        print("Valor médio do Dataset FTSE: ", mean_dataset_ftse)
        if mean_dataset_ftse > ftse_dataset [11]: 
          print("Tendência de alta dos valores do FTSE")
        else: 
          print("Tendência de queda dos valores do FTSE")
        

        #Valor da Mediana do Dataset. 
        median_dataset_imob = np.median(imob_dataset)
        median_dataset_ftse = np.median(ftse_dataset)
        print("Mediana do Dataset Imob: ", median_dataset_imob)
        print("Mediana do Dataset FTSE: ", median_dataset_ftse)


        #Valor modal do Dataset. 
        from scipy import stats 
        mode_dataset_imob = stats.mode(imob_dataset)
        mode_dataset_ftse = stats.mode(ftse_dataset)
        print("Valor modal do Dataset Imob: ", mode_dataset_imob)
        print("Valor modal do Dataset FTSE: ", mode_dataset_ftse)

        #Valor da variância do Dataset. 
        var_dataset_imob = np.var(imob_dataset)
        var_dataset_ftse = np.var(ftse_dataset)
        print("Valor da variância do Dataset Imob: ", var_dataset_imob)
        print("Valor da variância do Dataset FTSE: ", var_dataset_ftse)

        #Valor do Desvio Padrão do Dataset. 
        std_dataset_imob = np.std(imob_dataset)
        std_dataset_ftse = np.std(ftse_dataset)
        print("Volatilidade do Dataset Imob: ", std_dataset_imob)
        print("Volatilidade do Dataset FTSE: ", std_dataset_ftse)


        #Valores para 3 Desvio Padrão 
        #Alcance máximo e mínimo do índice. 

        s3_imob = mean_dataset_imob + 3* std_dataset_imob
        s3_imob_ = mean_dataset_imob - 3* std_dataset_imob
        print("Valor máximo alcancavel pelo Dataset Imob: ", s3_imob)
        print("Valor mínimo alcancavel pelo Dataset Imob: ", s3_imob_)
        
        s3_ftse = mean_dataset_ftse + 3* std_dataset_ftse
        s3_ftse_ = mean_dataset_ftse - 3* std_dataset_ftse
        print("Valor máximo alcancavel pelo Dataset FTSE: ", s3_ftse)
        print("Valor mínimo alcancavel pelo Dataset FTSE:  ", s3_ftse_)

        #Escrever o retorno a média quando  a média na tela.

        new_dataset = imob_dataset + ftse_dataset 

        import numpy as np 
        std_new_dataset = np.std(new_dataset)
        mean_new_dataset = np.mean(new_dataset)

        
        print("Margem de Erro")
        #Confidence Level - CL 
        #CL Level 1 - 0.9
        #CL Level 2 - 0.95
        #CL Level 3 - 0.99

        #Probabilidade Remanescente 
        a1 = 1 - 0.9
        a2 = 1 - 0.95
        a3 = 1 - 0.99

        error1 = (a1*(std_new_dataset/(24**0.5)))*100
        error2 = (a2*(std_new_dataset/(24**0.5)))*100
        error3 = (a3*(std_new_dataset/(24**0.5)))*100

        error_total = [error1, error2, error3]

        print("Percentis de Erro")
        print("Erro1: ", error1)
        print("Erro2: ", error2)
        print("Erro3: ", error3)

        range_error = max(error_total) - min(error_total)
        print("Intervalo da Margem de Erro: ", range_error)

        #Percentis 
        print("Percentis")
        import numpy as np 
        x0 = np.percentile(new_dataset, 25)
        x1 = np.percentile(new_dataset, 50)
        x2 = np.percentile(new_dataset, 75)
        x3 = np.percentile(new_dataset, 100)

        print("Percentil 25%: ", x0)
        print("Percentil 50%: ", x1)
        print("Percentil 75%: ", x2)
        print("Percentil 100%: ", x3)

        print("Padronização")

        sum_new_dataset  = sum(new_dataset)
        z1 = ((sum_new_dataset - mean_new_dataset)/std_new_dataset)

        print("Padronização: ", z1)

        print("Regressão Linear")
        #Equação da reta = y = ax + b 
        #reta = 2x + 1

        y0 = (2*new_dataset [0]) + 1
        y1 = (2*new_dataset [1]) + 1
        y2 = (2*new_dataset [2]) + 1
        y3 = (2*new_dataset [3]) + 1
        y4 = (2*new_dataset [4]) + 1
        y5 = (2*new_dataset [5]) + 1
        y6 = (2*new_dataset [6]) + 1
        y7 = (2*new_dataset [7]) + 1
        y8 = (2*new_dataset [8]) + 1
        y9 = (2*new_dataset [9]) + 1
        y10 = (2*new_dataset [10]) + 1
        y11 = (2*new_dataset [11]) + 1
        y12 = (2*new_dataset [12]) + 1
        y13 = (2*new_dataset [13]) + 1
        y14 = (2*new_dataset [14]) + 1
        y15 = (2*new_dataset [15]) + 1
        y16 = (2*new_dataset [16]) + 1
        y17 = (2*new_dataset [17]) + 1
        y18 = (2*new_dataset [18]) + 1
        y19 = (2*new_dataset [19]) + 1
        y20 = (2*new_dataset [20]) + 1
        y21 = (2*new_dataset [21]) + 1
        y22 = (2*new_dataset [22]) + 1
        y23 = (2*new_dataset [23]) + 1

        reta = [y0, y1, y2, y3, y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23]
        t0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]

        #Gráfico Regressão Linear 
        import matplotlib.pyplot as plt 
        import numpy as np 

        xpoints = np.array([t0])
        ypoints = np.array([reta])

        plt.scatter(t0, reta)
        plt.title("Regressão Linear")
        plt.show()


      elif function == 3: 
        print("Relação Cliente-Corretor")
        print("Função:\nAnalisa a probabilidade de um cliente ficar inadimplente em relação ao contrato")
        client_name = str(input("Entre com o nome do cliente: "))
        print("Período")
        print("Defina o periodo a ser analisado: ")
        print("1 - Anual\n2 - Mensal")
        opt_periodo = int(input("Entre com a sua opção de período: "))
        if opt_periodo == 1: 
          print("Analisar periodo Anual")
        else: 
          print("Analisar periodo Mensal")

        print("Taxas de Inflação")
        print("Obs: Caso você não saiba a taxa de inflação e a taxa de juros, por favor acesse o link do BACEN abaixo: ")
        print("https://www.bcb.gov.br")

        ipca_inf = float(input("Entre com o IPCA do periodo: "))
        print("IPCA Mensal: ", ipca_inf/12)

        print("IGPM")
        print("Para ter acesso aos valores históricos do IGPM click no link abaixo: ")
        print("https://www.debit.com.br/tabelas/igpm-fgv-indice-geral-de-precos-mercado")

        igpm_inf = float(input("Entre com o IGPM do periodo analisado: "))
        print("IGPM Mensal: ", igpm_inf/12)

        print("Renda")
        renda_liquida_cliente = float(input("Entre com a renda liquida anual do cliente: "))
        print("Renda Líquida Mensal do Cliente: ", renda_liquida_cliente/12)

        renda_liquida_ajustada = renda_liquida_cliente - (renda_liquida_cliente * (ipca_inf/100))
        print("Renda Líquida Anual ajustada ao IPCA: ", renda_liquida_ajustada)
        print("Renda Líquida Mensal ajustada ao IPCA: ", renda_liquida_ajustada/12)

        print("Parcelas")
        valor_imovel = float(input("Entre com o valor do imóvel: "))
        valor_ajustado_imovel = valor_imovel + (valor_imovel * (igpm_inf/100))

        print("Valor do imóvel ajustado ao IGPM: ", valor_ajustado_imovel)
        parcela = float(input("Entre com o valor da parcela a ser paga pelo cliente: "))
        parcela_ajustada = parcela + (parcela * ((igpm_inf/12)/100))
        print("Valor da parcela ajustada ao IGPM: ", parcela_ajustada)

        print("Taxa de Esforço do Parcelamento")
        tx_esforco = (parcela_ajustada/(renda_liquida_ajustada/12))*100

        print("Taxa de Esforço do Parcelamento: ", tx_esforco)
        if tx_esforco > 35: 
          print("Alta Probabilidade de Inadimplência por parte do cliente")
        else: 
          print("Baixa Probabilidade de Inadimplência por parte do cliente")


      elif function == 4: 
        print("Melhores taxas para financiamento")
        print("Para fazer um comparativo entre taxas de juros, acesse o Simulador de Financiamentos Homer: ")
        #Simulador retirado do Portal FGV no dia 02/01/2024 ás 12:59h. 
        print("https://web.homer.com.br/CreditoImobiliario/Simulador")




      elif function == 5: 
        print("Contato com o suporte")
        print("Whatsapp:\n https://web.whatsapp.com")
        print("E-mail:\n https://login.live.com/login.srf?wa=wsignin1.0&rpsnv=18&ct=1702511469&rver=7.0.6738.0&wp=MBI_SSL&wreply=https%3a%2f%2foutlook.live.com%2fowa%2f0%2f%3fstate%3d1%26redirectTo%3daHR0cHM6Ly9vdXRsb29rLmxpdmUuY29tL21haWwvMC8%26RpsCsrfState%3d9891c9c4-0426-e46e-2c32-483ceb0e580e&id=292841&aadredir=1&whr=live.com&CBCXT=out&lw=1&fl=dob%2cflname%2cwld&cobrandid=90015")



    else: 
      print("Encerrar algoritmo.")
      print("Obrigado pela sua utilização")

    
    break
  # Se a entrada for diferente da senha
  else:
    # Reduzir o número de tentativas
    tentativas -= 1
    # Se ainda houver tentativas
    if tentativas > 0:
      # Informar ao usuário que ele errou e quantas tentativas restam
      print(f"Você errou a senha. Você tem {tentativas} tentativa(s) restante(s).")
    # Se não houver mais tentativas
    else:
      # Informar ao usuário que ele perdeu e qual era a senha correta
      print(f"Número de tentativas excedidas. Acesso negado.")

print("Developed by:\nKontreiraz")
